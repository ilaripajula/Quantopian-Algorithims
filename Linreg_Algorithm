"""
Algorithim calculates the linear regression slope of the last 20 days of trading and aims to benefit from the momentum of the price movement. Buys when slope > 0, sells when slope < 0. But the data timeframe and the slope amount should be optimized before trading.

"""
import talib 
import numpy as np
import math
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline
from quantopian.pipeline.filters.morningstar import Q500US
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.factors import SimpleMovingAverage, AverageDollarVolume

def initialize(context):
    """
    Called once at the start of the algorithm.
    """
    context.counter = 0
        
    schedule_function(rebalance,date_rule=date_rules.every_day(),
                          time_rule=time_rules.market_open())
    set_commission(commission.PerShare(cost=0.0075, min_trade_cost=1.00))
    
    # Create dynamic stock selector.
    attach_pipeline(make_pipeline(), 'my_pipeline')
    
    
def make_pipeline():
    """
    A function to create a dynamic stock selector (pipeline). Documentation on
    pipeline can be found here: https://www.quantopian.com/help#pipeline-title
    """
    # Construct a simple moving average factor
    sma = SimpleMovingAverage(inputs=[USEquityPricing.close], window_length=10)
    # Construct a 30-day average dollar volume factor 
    dollar_volume = AverageDollarVolume(window_length=30)

    # Define high dollar-volume filter to be the top 1% of stocks by dollar volume.
    high_dollar_volume = dollar_volume.percentile_between(99, 100)

    # Set a screen on the pipelines to filter out securities.
    pipe_screen = ((sma > 100.0) & high_dollar_volume)

    # Create a columns dictionary
    pipe_columns = {'dollar_volume':dollar_volume, 'sma':sma}

    # Create, register and name a pipeline in initialize.
    pipe = Pipeline(columns=pipe_columns,screen=pipe_screen)
    return pipe
 
def before_trading_start(context, data):
    """
    Called every day before market open.
    """
    context.output = pipeline_output('my_pipeline').head(5)
    # These are the securities that we are interested in trading each day.
    context.stocks = context.output.index
    
    context.weight = (1.0 / len(context.stocks))
    

def rebalance(context,data):
    
    context.counter += 1

    
    if context.counter >= 1: # custom number of days rebalance can get called 
        context.counter = 0 
    
        for stock in context.stocks:
                        
            prices = data.history(stock, 'price', 20 , '1d')
            
            current_position = context.portfolio.positions[stock].amount
                                    
            slope = talib.LINEARREG_SLOPE(prices,20)[-1]
            
            print "Slope: " + str(slope) + "for " + str(stock)

            if slope > 0 and current_position <= 0 and data.can_trade(stock):
                order_target_percent(stock,context.weight)
                
            elif slope < 0 and current_position >= 0 and data.can_trade(stock):
                order_target_percent(stock, 0)
                
    else:
        pass
